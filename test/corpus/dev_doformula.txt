=========
doformula
=========

=let(funcs,
    {
        "SIN",
        "COS",
        "TAN",
        "COT",
        "ATN",
        "EXP",
        "LOG",
        "ABS",
        "SQR"
    },
    curfunc, regexextract(in, "^.*?("&join("|",funcs)&")([\d.-]+)"),
    arg, index(curfunc, 2),
    out, choose(match(single(curfunc),funcs,),
            sin(arg),
            cos(arg),
            tan(arg),
            cot(arg),
            atan(arg),
            exp(arg),
            ln(arg),
            abs(arg),
            sqrt(arg)
    ),
    if(iserror(curfunc),in,
        regexreplace(in, "(^.*?)("&join("|",funcs)&")([\d.-]+)", "$1"&out)
    )
)

---

(source_file
  (function_call
    (identifier)
    (identifier)
    (array_literal
      (string)
      (string)
      (string)
      (string)
      (string)
      (string)
      (string)
      (string)
      (string))
    (identifier)
    (function_call
      (identifier)
      (identifier)
      (operator_expression
        (operator_expression
          (string)
          (binary_operator)
          (function_call
            (identifier)
            (string)
            (identifier)))
        (binary_operator)
        (string)))
    (identifier)
    (function_call
      (identifier)
      (identifier)
      (number))
    (identifier)
    (function_call
      (identifier)
      (function_call
        (identifier)
        (function_call
          (identifier)
          (identifier))
        (identifier))
      (function_call
        (identifier)
        (identifier))
      (function_call
        (identifier)
        (identifier))
      (function_call
        (identifier)
        (identifier))
      (function_call
        (identifier)
        (identifier))
      (function_call
        (identifier)
        (identifier))
      (function_call
        (identifier)
        (identifier))
      (function_call
        (identifier)
        (identifier))
      (function_call
        (identifier)
        (identifier))
      (function_call
        (identifier)
        (identifier)))
    (function_call
      (identifier)
      (function_call
        (identifier)
        (identifier))
      (identifier)
      (function_call
        (identifier)
        (identifier)
        (operator_expression
          (operator_expression
            (string)
            (binary_operator)
            (function_call
              (identifier)
              (string)
              (identifier)))
          (binary_operator)
          (string))
        (operator_expression
          (string)
          (binary_operator)
          (identifier))))))
