=ArrayFormula(let(
    input,A2,
    udt,lambda(a,b,n,lambda(i,choose(i,a,b,n))),
    access,lambda(udt,index,reduce(udt,sequence(index),lambda(a,b,if(iserror(b),a,a(2))))(1)),
    fxs,{"date",3;"datedif",3;"datevalue",1;"day",1;"days",2;"days360",3;"edate",2;"eomonth",2;"epochtodate",2;"hour",1;"isoweeknum",1;"minute",1;"month",1;"networkdays",3;"networkdays.intl",4;"now",0;"second",1;"time",3;"timevalue",1;"today",0;"weekday",2;"weeknum",2;"workday",3;"workday.intl",4;"year",1;"yearfrac",3;"bin2dec",1;"bin2hex",2;"bin2oct",2;"bitand",2;"bitlshift",2;"bitor",2;"bitrshift",2;"bitxor",2;"complex",3;"dec2bin",2;"dec2hex",2;"dec2oct",2;"delta",2;"erf",2;"erf.precise",2;"gestep",2;"hex2bin",2;"hex2dec",1;"hex2oct",2;"imabs",1;"imaginary",1;"imargument",1;"imconjugate",1;"imcos",1;"imcosh",1;"imcot",1;"imcoth",1;"imcsc",1;"imcsch",1;"imdiv",2;"imexp",1;"imlog",2;"imlog10",1;"imlog2",1;"improduct",3;"imreal",1;"imsec",1;"imsech",1;"imsin",1;"imsinh",1;"imsub",2;"imsum",3;"imtan",1;"imtanh",1;"oct2bin",2;"oct2dec",1;"oct2hex",2;"filter",3;"sort",5;"sortn",6;"unique",1;"accrint",7;"accrintm",5;"amorlinc",7;"coupdaybs",4;"coupdays",4;"coupdaysnc",4;"coupncd",4;"coupnum",4;"couppcd",4;"cumipmt",6;"cumprinc",6;"db",5;"ddb",5;"disc",5;"dollarde",2;"dollarfr",2;"duration",6;"effect",2;"fv",5;"fvschedule",2;"intrate",5;"ipmt",6;"irr",2;"ispmt",4;"mduration",6;"mirr",3;"nominal",2;"nper",5;"npv",4;"pduration",3;"pmt",5;"ppmt",6;"price",7;"pricedisc",5;"pricemat",6;"pv",5;"rate",5;"received",5;"rri",3;"sln",3;"syd",4;"tbilleq",3;"tbillprice",3;"tbillyield",3;"vdb",7;"xirr",3;"xnpv",3;"yield",7;"yielddisc",5;"yieldmat",6;"arrayformula",1;"detectlanguage",1;"googlefinance",5;"googletranslate",3;"image",4;"query",3;"sparkline",2;"error.type",1;"isblank",1;"isdate",1;"isemail",1;"iserr",1;"iserror",1;"isformula",1;"islogical",1;"isna",1;"isnontext",1;"isnumber",1;"isref",1;"istext",1;"n",1;"na",0;"type",1;"cell",2;"and",3;"false",0;"if",3;"iferror",2;"ifna",2;"ifs",5;"lambda",2;"let",7;"not",1;"or",3;"switch",6;"true",0;"xor",3;"address",5;"choose",4;"column",1;"columns",1;"formulatext",1;"getpivotdata",5;"hlookup",4;"index",3;"indirect",2;"lookup",3;"match",3;"offset",5;"row",1;"rows",1;"vlookup",4;"xlookup",5;"abs",1;"acos",1;"acosh",1;"acot",1;"acoth",1;"asin",1;"asinh",1;"atan",1;"atan2",2;"atanh",1;"base",3;"ceiling",2;"ceiling.math",3;"ceiling.precise",2;"combin",2;"combina",2;"cos",1;"cosh",1;"cot",1;"coth",1;"countblank",1;"countif",2;"countifs",5;"countunique",3;"csc",1;"csch",1;"decimal",2;"degrees",1;"erfc",1;"erfc.precise",1;"even",1;"exp",1;"fact",1;"factdouble",1;"floor",2;"floor.math",3;"floor.precise",2;"gammaln",1;"gammaln.precise",1;"gcd",2;"imln",1;"impower",2;"imsqrt",1;"int",1;"iseven",1;"iso.ceiling",2;"isodd",1;"lcm",2;"ln",1;"log",2;"log10",1;"mod",2;"mround",2;"multinomial",2;"munit",1;"odd",1;"pi",0;"power",2;"product",3;"quotient",2;"radians",1;"rand",0;"randarray",2;"randbetween",2;"round",2;"rounddown",2;"roundup",2;"sec",1;"sech",1;"sequence",4;"seriessum",4;"sign",1;"sin",1;"sinh",1;"sqrt",1;"sqrtpi",1;"subtotal",4;"sum",3;"sumif",3;"sumifs",5;"sumsq",3;"tan",1;"tanh",1;"trunc",2;"add",2;"concat",2;"divide",2;"eq",2;"gt",2;"gte",2;"isbetween",4;"lt",2;"lte",2;"minus",2;"multiply",2;"ne",2;"pow",2;"uminus",1;"unary_percent",1;"unique",3;"uplus",1;"avedev",3;"average",3;"average.weighted",4;"averagea",3;"averageif",3;"averageifs",5;"beta.dist",6;"beta.inv",5;"betadist",5;"betainv",5;"binom.dist",4;"binom.inv",3;"binomdist",4;"chidist",2;"chiinv",2;"chisq.dist",3;"chisq.dist.rt",2;"chisq.inv",2;"chisq.inv.rt",2;"chisq.test",2;"chitest",2;"confidence",3;"confidence.norm",3;"confidence.t",3;"correl",2;"count",3;"counta",3;"covar",2;"covariance.p",2;"covariance.s",2;"critbinom",3;"devsq",2;"expon.dist",3;"expondist",3;"f.dist",4;"f.dist.rt",3;"f.inv",3;"f.inv.rt",3;"f.test",2;"fdist",3;"finv",3;"fisher",1;"fisherinv",1;"forecast",3;"forecast.linear",3;"ftest",2;"gamma",1;"gamma.dist",4;"gamma.inv",3;"gammadist",4;"gammainv",3;"gauss",1;"geomean",2;"harmean",2;"hypgeom.dist",4;"hypgeomdist",4;"intercept",2;"kurt",2;"large",2;"loginv",3;"lognorm.dist",3;"lognorm.inv",3;"lognormdist",3;"marginoferror",2;"max",3;"maxa",2;"maxifs",6;"median",3;"min",3;"mina",2;"minifs",6;"mode",3;"mode.mult",2;"mode.sngl",3;"negbinom.dist",3;"negbinomdist",3;"norm.dist",4;"norm.inv",3;"norm.s.dist",1;"norm.s.inv",1;"normdist",4;"norminv",3;"normsdist",1;"normsinv",1;"pearson",2;"percentile",2;"percentile.exc",2;"percentile.inc",2;"percentrank",3;"percentrank.exc",3;"percentrank.inc",3;"permutationa",2;"permut",2;"phi",1;"poisson",3;"poisson.dist",3;"prob",4;"quartile",2;"quartile.exc",2;"quartile.inc",2;"rank",3;"rank.avg",3;"rank.eq",3;"rsq",2;"skew",2;"skew.p",2;"slope",2;"small",2;"standardize",3;"stdev",3;"stdev.p",3;"stdev.s",3;"stdeva",2;"stdevp",2;"stdevpa",2;"steyx",2;"t.dist",3;"t.dist.2t",2;"t.dist.rt",2;"t.inv",2;"t.inv.2t",2;"t.test",4;"tdist",3;"tinv",2;"trimmean",2;"ttest",4;"var",3;"var.p",3;"var.s",3;"vara",2;"varp",2;"varpa",3;"weibull",4;"weibull.dist",4;"z.test",3;"ztest",3;"arabic",1;"asc",1;"char",1;"clean",1;"code",1;"concatenate",3;"dollar",2;"exact",2;"find",3;"findb",3;"fixed",3;"join",4;"left",2;"leftb",2;"len",1;"lenb",1;"lower",1;"mid",3;"midb",1;"proper",1;"regexextract",2;"regexmatch",2;"regexreplace",3;"replace",4;"replaceb",4;"rept",2;"right",2;"rightb",2;"roman",2;"search",3;"searchb",3;"split",4;"substitute",4;"t",1;"text",2;"textjoin",5;"trim",1;"unichar",1;"unicode",1;"upper",1;"value",1;"daverage",3;"dcount",3;"dcounta",3;"dget",3;"dmax",3;"dmin",3;"dproduct",3;"dstdev",3;"dstdevp",3;"dsum",3;"dvar",3;"dvarp",3;"convert",3;"to_date",1;"to_dollars",1;"to_percent",1;"to_pure_number",1;"to_text",1;"array_constrain",3;"bycol",2;"byrow",2;"choosecols",3;"chooserows",3;"flatten",3;"frequency",2;"growth",4;"hstack",2;"linest",4;"logest",4;"makearray",3;"map",4;"mdeterm",1;"minverse",1;"mmult",2;"reduce",3;"scan",3;"sumproduct",3;"sumx2my2",2;"sumx2py2",2;"sumxmy2",2;"tocol",3;"torow",3;"transpose",1;"trend",4;"vstack",2;"wrapcols",3;"wraprows",3;"encodeurl",1;"hyperlink",2;"importdata",1;"importfeed",4;"importhtml",3;"importrange",2;"importxml",2;"isurl",1},
    getfunc,lambda(name,let(index,match(name,index(fxs,,1),),choose(ceiling(index/29),choose(mod(index-1,29)+1,lambda(a,b,c,date(a,b,c)),lambda(a,b,c,datedif(a,b,c)),lambda(a,datevalue(a)),lambda(a,day(a)),lambda(a,b,days(a,b)),lambda(a,b,c,days360(a,b,c)),lambda(a,b,edate(a,b)),lambda(a,b,eomonth(a,b)),lambda(a,b,epochtodate(a,b)),lambda(a,hour(a)),lambda(a,isoweeknum(a)),lambda(a,minute(a)),lambda(a,month(a)),lambda(a,b,c,networkdays(a,b,c)),lambda(a,b,c,d,networkdays.intl(a,b,c,d)),now(),lambda(a,second(a)),lambda(a,b,c,time(a,b,c)),lambda(a,timevalue(a)),today(),lambda(a,b,weekday(a,b)),lambda(a,b,weeknum(a,b)),lambda(a,b,c,workday(a,b,c)),lambda(a,b,c,d,workday.intl(a,b,c,d)),lambda(a,year(a)),lambda(a,b,c,yearfrac(a,b,c)),lambda(a,bin2dec(a)),lambda(a,b,bin2hex(a,b)),lambda(a,b,bin2oct(a,b))),choose(mod(index-1,29)+1,lambda(a,b,bitand(a,b)),lambda(a,b,bitlshift(a,b)),lambda(a,b,bitor(a,b)),lambda(a,b,bitrshift(a,b)),lambda(a,b,bitxor(a,b)),lambda(a,b,c,complex(a,b,c)),lambda(a,b,dec2bin(a,b)),lambda(a,b,dec2hex(a,b)),lambda(a,b,dec2oct(a,b)),lambda(a,b,delta(a,b)),lambda(a,b,erf(a,b)),lambda(a,b,erf.precise(a,b)),lambda(a,b,gestep(a,b)),lambda(a,b,hex2bin(a,b)),lambda(a,hex2dec(a)),lambda(a,b,hex2oct(a,b)),lambda(a,imabs(a)),lambda(a,imaginary(a)),lambda(a,imargument(a)),lambda(a,imconjugate(a)),lambda(a,imcos(a)),lambda(a,imcosh(a)),lambda(a,imcot(a)),lambda(a,imcoth(a)),lambda(a,imcsc(a)),lambda(a,imcsch(a)),lambda(a,b,imdiv(a,b)),lambda(a,imexp(a)),lambda(a,b,imlog(a,b))),choose(mod(index-1,29)+1,lambda(a,imlog10(a)),lambda(a,imlog2(a)),lambda(a,b,c,improduct(a,b,c)),lambda(a,imreal(a)),lambda(a,imsec(a)),lambda(a,imsech(a)),lambda(a,imsin(a)),lambda(a,imsinh(a)),lambda(a,b,imsub(a,b)),lambda(a,b,c,imsum(a,b,c)),lambda(a,imtan(a)),lambda(a,imtanh(a)),lambda(a,b,oct2bin(a,b)),lambda(a,oct2dec(a)),lambda(a,b,oct2hex(a,b)),lambda(a,b,c,filter(a,b,c)),lambda(a,b,c,d,e,sort(a,b,c,d,e)),lambda(a,b,c,d,e,f,sortn(a,b,c,d,e,f)),lambda(a,unique(a)),lambda(a,b,c,d,e,f,g,accrint(a,b,c,d,e,f,g)),lambda(a,b,c,d,e,accrintm(a,b,c,d,e)),lambda(a,b,c,d,e,f,g,amorlinc(a,b,c,d,e,f,g)),lambda(a,b,c,d,coupdaybs(a,b,c,d)),lambda(a,b,c,d,coupdays(a,b,c,d)),lambda(a,b,c,d,coupdaysnc(a,b,c,d)),lambda(a,b,c,d,coupncd(a,b,c,d)),lambda(a,b,c,d,coupnum(a,b,c,d)),lambda(a,b,c,d,couppcd(a,b,c,d)),lambda(a,b,c,d,e,f,cumipmt(a,b,c,d,e,f))),choose(mod(index-1,29)+1,lambda(a,b,c,d,e,f,cumprinc(a,b,c,d,e,f)),lambda(a,b,c,d,e,db(a,b,c,d,e)),lambda(a,b,c,d,e,ddb(a,b,c,d,e)),lambda(a,b,c,d,e,disc(a,b,c,d,e)),lambda(a,b,dollarde(a,b)),lambda(a,b,dollarfr(a,b)),lambda(a,b,c,d,e,f,duration(a,b,c,d,e,f)),lambda(a,b,effect(a,b)),lambda(a,b,c,d,e,fv(a,b,c,d,e)),lambda(a,b,fvschedule(a,b)),lambda(a,b,c,d,e,intrate(a,b,c,d,e)),lambda(a,b,c,d,e,f,ipmt(a,b,c,d,e,f)),lambda(a,b,irr(a,b)),lambda(a,b,c,d,ispmt(a,b,c,d)),lambda(a,b,c,d,e,f,mduration(a,b,c,d,e,f)),lambda(a,b,c,mirr(a,b,c)),lambda(a,b,nominal(a,b)),lambda(a,b,c,d,e,nper(a,b,c,d,e)),lambda(a,b,c,d,npv(a,b,c,d)),lambda(a,b,c,pduration(a,b,c)),lambda(a,b,c,d,e,pmt(a,b,c,d,e)),lambda(a,b,c,d,e,f,ppmt(a,b,c,d,e,f)),lambda(a,b,c,d,e,f,g,price(a,b,c,d,e,f,g)),lambda(a,b,c,d,e,pricedisc(a,b,c,d,e)),lambda(a,b,c,d,e,f,pricemat(a,b,c,d,e,f)),lambda(a,b,c,d,e,pv(a,b,c,d,e)),lambda(a,b,c,d,e,rate(a,b,c,d,e)),lambda(a,b,c,d,e,received(a,b,c,d,e)),lambda(a,b,c,rri(a,b,c))),choose(mod(index-1,29)+1,lambda(a,b,c,sln(a,b,c)),lambda(a,b,c,d,syd(a,b,c,d)),lambda(a,b,c,tbilleq(a,b,c)),lambda(a,b,c,tbillprice(a,b,c)),lambda(a,b,c,tbillyield(a,b,c)),lambda(a,b,c,d,e,f,g,vdb(a,b,c,d,e,f,g)),lambda(a,b,c,xirr(a,b,c)),lambda(a,b,c,xnpv(a,b,c)),lambda(a,b,c,d,e,f,g,yield(a,b,c,d,e,f,g)),lambda(a,b,c,d,e,yielddisc(a,b,c,d,e)),lambda(a,b,c,d,e,f,yieldmat(a,b,c,d,e,f)),lambda(a,arrayformula(a)),lambda(a,detectlanguage(a)),lambda(a,b,c,d,e,googlefinance(a,b,c,d,e)),lambda(a,b,c,googletranslate(a,b,c)),lambda(a,b,c,d,image(a,b,c,d)),lambda(a,b,c,query(a,b,c)),lambda(a,b,sparkline(a,b)),lambda(a,error.type(a)),lambda(a,isblank(a)),lambda(a,isdate(a)),lambda(a,isemail(a)),lambda(a,iserr(a)),lambda(a,iserror(a)),lambda(a,isformula(a)),lambda(a,islogical(a)),lambda(a,isna(a)),lambda(a,isnontext(a)),lambda(a,isnumber(a))),choose(mod(index-1,29)+1,lambda(a,isref(a)),lambda(a,istext(a)),lambda(a,n(a)),na(),lambda(a,type(a)),lambda(a,b,cell(a,b)),lambda(a,b,c,and(a,b,c)),false(),lambda(a,b,c,if(a,b,c)),lambda(a,b,iferror(a,b)),lambda(a,b,ifna(a,b)),lambda(a,b,c,d,e,ifs(a,b,c,d,e)),lambda(a,b,lambda(a,b)),lambda(a,b,c,d,e,f,g,let(a,b,c,d,e,f,g)),lambda(a,not(a)),lambda(a,b,c,or(a,b,c)),lambda(a,b,c,d,e,f,switch(a,b,c,d,e,f)),true(),lambda(a,b,c,xor(a,b,c)),lambda(a,b,c,d,e,address(a,b,c,d,e)),lambda(a,b,c,d,choose(a,b,c,d)),lambda(a,column(a)),lambda(a,columns(a)),lambda(a,formulatext(a)),lambda(a,b,c,d,e,getpivotdata(a,b,c,d,e)),lambda(a,b,c,d,hlookup(a,b,c,d)),lambda(a,b,c,index(a,b,c)),lambda(a,b,indirect(a,b)),lambda(a,b,c,lookup(a,b,c))),choose(mod(index-1,29)+1,lambda(a,b,c,match(a,b,c)),lambda(a,b,c,d,e,offset(a,b,c,d,e)),lambda(a,row(a)),lambda(a,rows(a)),lambda(a,b,c,d,vlookup(a,b,c,d)),lambda(a,b,c,d,e,xlookup(a,b,c,d,e)),lambda(a,abs(a)),lambda(a,acos(a)),lambda(a,acosh(a)),lambda(a,acot(a)),lambda(a,acoth(a)),lambda(a,asin(a)),lambda(a,asinh(a)),lambda(a,atan(a)),lambda(a,b,atan2(a,b)),lambda(a,atanh(a)),lambda(a,b,c,base(a,b,c)),lambda(a,b,ceiling(a,b)),lambda(a,b,c,ceiling.math(a,b,c)),lambda(a,b,ceiling.precise(a,b)),lambda(a,b,combin(a,b)),lambda(a,b,combina(a,b)),lambda(a,cos(a)),lambda(a,cosh(a)),lambda(a,cot(a)),lambda(a,coth(a)),lambda(a,countblank(a)),lambda(a,b,countif(a,b)),lambda(a,b,c,d,e,countifs(a,b,c,d,e))),choose(mod(index-1,29)+1,lambda(a,b,c,countunique(a,b,c)),lambda(a,csc(a)),lambda(a,csch(a)),lambda(a,b,decimal(a,b)),lambda(a,degrees(a)),lambda(a,erfc(a)),lambda(a,erfc.precise(a)),lambda(a,even(a)),lambda(a,exp(a)),lambda(a,fact(a)),lambda(a,factdouble(a)),lambda(a,b,floor(a,b)),lambda(a,b,c,floor.math(a,b,c)),lambda(a,b,floor.precise(a,b)),lambda(a,gammaln(a)),lambda(a,gammaln.precise(a)),lambda(a,b,gcd(a,b)),lambda(a,imln(a)),lambda(a,b,impower(a,b)),lambda(a,imsqrt(a)),lambda(a,int(a)),lambda(a,iseven(a)),lambda(a,b,iso.ceiling(a,b)),lambda(a,isodd(a)),lambda(a,b,lcm(a,b)),lambda(a,ln(a)),lambda(a,b,log(a,b)),lambda(a,log10(a)),lambda(a,b,mod(a,b))),choose(mod(index-1,29)+1,lambda(a,b,mround(a,b)),lambda(a,b,multinomial(a,b)),lambda(a,munit(a)),lambda(a,odd(a)),pi(),lambda(a,b,power(a,b)),lambda(a,b,c,product(a,b,c)),lambda(a,b,quotient(a,b)),lambda(a,radians(a)),rand(),lambda(a,b,randarray(a,b)),lambda(a,b,randbetween(a,b)),lambda(a,b,round(a,b)),lambda(a,b,rounddown(a,b)),lambda(a,b,roundup(a,b)),lambda(a,sec(a)),lambda(a,sech(a)),lambda(a,b,c,d,sequence(a,b,c,d)),lambda(a,b,c,d,seriessum(a,b,c,d)),lambda(a,sign(a)),lambda(a,sin(a)),lambda(a,sinh(a)),lambda(a,sqrt(a)),lambda(a,sqrtpi(a)),lambda(a,b,c,d,subtotal(a,b,c,d)),lambda(a,b,c,sum(a,b,c)),lambda(a,b,c,sumif(a,b,c)),lambda(a,b,c,d,e,sumifs(a,b,c,d,e)),lambda(a,b,c,sumsq(a,b,c))),choose(mod(index-1,29)+1,lambda(a,tan(a)),lambda(a,tanh(a)),lambda(a,b,trunc(a,b)),lambda(a,b,add(a,b)),lambda(a,b,concat(a,b)),lambda(a,b,divide(a,b)),lambda(a,b,eq(a,b)),lambda(a,b,gt(a,b)),lambda(a,b,gte(a,b)),lambda(a,b,c,d,isbetween(a,b,c,d)),lambda(a,b,lt(a,b)),lambda(a,b,lte(a,b)),lambda(a,b,minus(a,b)),lambda(a,b,multiply(a,b)),lambda(a,b,ne(a,b)),lambda(a,b,pow(a,b)),lambda(a,uminus(a)),lambda(a,unary_percent(a)),lambda(a,b,c,unique(a,b,c)),lambda(a,uplus(a)),lambda(a,b,c,avedev(a,b,c)),lambda(a,b,c,average(a,b,c)),lambda(a,b,c,d,average.weighted(a,b,c,d)),lambda(a,b,c,averagea(a,b,c)),lambda(a,b,c,averageif(a,b,c)),lambda(a,b,c,d,e,averageifs(a,b,c,d,e)),lambda(a,b,c,d,e,f,beta.dist(a,b,c,d,e,f)),lambda(a,b,c,d,e,beta.inv(a,b,c,d,e)),lambda(a,b,c,d,e,betadist(a,b,c,d,e))),choose(mod(index-1,29)+1,lambda(a,b,c,d,e,betainv(a,b,c,d,e)),lambda(a,b,c,d,binom.dist(a,b,c,d)),lambda(a,b,c,binom.inv(a,b,c)),lambda(a,b,c,d,binomdist(a,b,c,d)),lambda(a,b,chidist(a,b)),lambda(a,b,chiinv(a,b)),lambda(a,b,c,chisq.dist(a,b,c)),lambda(a,b,chisq.dist.rt(a,b)),lambda(a,b,chisq.inv(a,b)),lambda(a,b,chisq.inv.rt(a,b)),lambda(a,b,chisq.test(a,b)),lambda(a,b,chitest(a,b)),lambda(a,b,c,confidence(a,b,c)),lambda(a,b,c,confidence.norm(a,b,c)),lambda(a,b,c,confidence.t(a,b,c)),lambda(a,b,correl(a,b)),lambda(a,b,c,count(a,b,c)),lambda(a,b,c,counta(a,b,c)),lambda(a,b,covar(a,b)),lambda(a,b,covariance.p(a,b)),lambda(a,b,covariance.s(a,b)),lambda(a,b,c,critbinom(a,b,c)),lambda(a,b,devsq(a,b)),lambda(a,b,c,expon.dist(a,b,c)),lambda(a,b,c,expondist(a,b,c)),lambda(a,b,c,d,f.dist(a,b,c,d)),lambda(a,b,c,f.dist.rt(a,b,c)),lambda(a,b,c,f.inv(a,b,c)),lambda(a,b,c,f.inv.rt(a,b,c))),choose(mod(index-1,29)+1,lambda(a,b,f.test(a,b)),lambda(a,b,c,fdist(a,b,c)),lambda(a,b,c,finv(a,b,c)),lambda(a,fisher(a)),lambda(a,fisherinv(a)),lambda(a,b,c,forecast(a,b,c)),lambda(a,b,c,forecast.linear(a,b,c)),lambda(a,b,ftest(a,b)),lambda(a,gamma(a)),lambda(a,b,c,d,gamma.dist(a,b,c,d)),lambda(a,b,c,gamma.inv(a,b,c)),lambda(a,b,c,d,gammadist(a,b,c,d)),lambda(a,b,c,gammainv(a,b,c)),lambda(a,gauss(a)),lambda(a,b,geomean(a,b)),lambda(a,b,harmean(a,b)),lambda(a,b,c,d,hypgeom.dist(a,b,c,d)),lambda(a,b,c,d,hypgeomdist(a,b,c,d)),lambda(a,b,intercept(a,b)),lambda(a,b,kurt(a,b)),lambda(a,b,large(a,b)),lambda(a,b,c,loginv(a,b,c)),lambda(a,b,c,lognorm.dist(a,b,c)),lambda(a,b,c,lognorm.inv(a,b,c)),lambda(a,b,c,lognormdist(a,b,c)),lambda(a,b,marginoferror(a,b)),lambda(a,b,c,max(a,b,c)),lambda(a,b,maxa(a,b)),lambda(a,b,c,d,e,f,maxifs(a,b,c,d,e,f))),choose(mod(index-1,29)+1,lambda(a,b,c,median(a,b,c)),lambda(a,b,c,min(a,b,c)),lambda(a,b,mina(a,b)),lambda(a,b,c,d,e,f,minifs(a,b,c,d,e,f)),lambda(a,b,c,mode(a,b,c)),lambda(a,b,mode.mult(a,b)),lambda(a,b,c,mode.sngl(a,b,c)),lambda(a,b,c,negbinom.dist(a,b,c)),lambda(a,b,c,negbinomdist(a,b,c)),lambda(a,b,c,d,norm.dist(a,b,c,d)),lambda(a,b,c,NORMINV(a,b,c)),lambda(a,norm.s.dist(a)),lambda(a,norm.s.inv(a)),lambda(a,b,c,d,normdist(a,b,c,d)),lambda(a,b,c,norminv(a,b,c)),lambda(a,normsdist(a)),lambda(a,normsinv(a)),lambda(a,b,pearson(a,b)),lambda(a,b,percentile(a,b)),lambda(a,b,percentile.exc(a,b)),lambda(a,b,percentile.inc(a,b)),lambda(a,b,c,percentrank(a,b,c)),lambda(a,b,c,percentrank.exc(a,b,c)),lambda(a,b,c,percentrank.inc(a,b,c)),lambda(a,b,permutationa(a,b)),lambda(a,b,permut(a,b)),lambda(a,phi(a)),lambda(a,b,c,poisson(a,b,c)),lambda(a,b,c,poisson.dist(a,b,c))),choose(mod(index-1,29)+1,lambda(a,b,c,d,prob(a,b,c,d)),lambda(a,b,quartile(a,b)),lambda(a,b,quartile.exc(a,b)),lambda(a,b,quartile.inc(a,b)),lambda(a,b,c,rank(a,b,c)),lambda(a,b,c,rank.avg(a,b,c)),lambda(a,b,c,rank.eq(a,b,c)),lambda(a,b,rsq(a,b)),lambda(a,b,skew(a,b)),lambda(a,b,skew.p(a,b)),lambda(a,b,slope(a,b)),lambda(a,b,small(a,b)),lambda(a,b,c,standardize(a,b,c)),lambda(a,b,c,stdev(a,b,c)),lambda(a,b,c,stdev.p(a,b,c)),lambda(a,b,c,stdev.s(a,b,c)),lambda(a,b,stdeva(a,b)),lambda(a,b,stdevp(a,b)),lambda(a,b,stdevpa(a,b)),lambda(a,b,steyx(a,b)),lambda(a,b,c,t.dist(a,b,c)),lambda(a,b,t.dist.2t(a,b)),lambda(a,b,t.dist.rt(a,b)),lambda(a,b,t.inv(a,b)),lambda(a,b,t.inv.2t(a,b)),lambda(a,b,c,d,t.test(a,b,c,d)),lambda(a,b,c,tdist(a,b,c)),lambda(a,b,tinv(a,b)),lambda(a,b,trimmean(a,b))),choose(mod(index-1,29)+1,lambda(a,b,c,d,ttest(a,b,c,d)),lambda(a,b,c,var(a,b,c)),lambda(a,b,c,VARP(a,b,c)),lambda(a,b,c,var.s(a,b,c)),lambda(a,b,vara(a,b)),lambda(a,b,varp(a,b)),lambda(a,b,c,varpa(a,b,c)),lambda(a,b,c,d,weibull(a,b,c,d)),lambda(a,b,c,d,weibull.dist(a,b,c,d)),lambda(a,b,c,z.test(a,b,c)),lambda(a,b,c,ztest(a,b,c)),lambda(a,arabic(a)),lambda(a,asc(a)),lambda(a,char(a)),lambda(a,clean(a)),lambda(a,code(a)),lambda(a,b,c,concatenate(a,b,c)),lambda(a,b,dollar(a,b)),lambda(a,b,exact(a,b)),lambda(a,b,c,find(a,b,c)),lambda(a,b,c,findb(a,b,c)),lambda(a,b,c,fixed(a,b,c)),lambda(a,b,c,d,join(a,b,c,d)),lambda(a,b,left(a,b)),lambda(a,b,leftb(a,b)),lambda(a,len(a)),lambda(a,lenb(a)),lambda(a,lower(a)),lambda(a,b,c,mid(a,b,c))),choose(mod(index-1,29)+1,lambda(a,midb(a)),lambda(a,proper(a)),lambda(a,b,regexextract(a,b)),lambda(a,b,regexmatch(a,b)),lambda(a,b,c,regexreplace(a,b,c)),lambda(a,b,c,d,replace(a,b,c,d)),lambda(a,b,c,d,replaceb(a,b,c,d)),lambda(a,b,rept(a,b)),lambda(a,b,right(a,b)),lambda(a,b,rightb(a,b)),lambda(a,b,roman(a,b)),lambda(a,b,c,search(a,b,c)),lambda(a,b,c,searchb(a,b,c)),lambda(a,b,c,d,split(a,b,c,d)),lambda(a,b,c,d,substitute(a,b,c,d)),lambda(a,t(a)),lambda(a,b,text(a,b)),lambda(a,b,c,d,e,textjoin(a,b,c,d,e)),lambda(a,trim(a)),lambda(a,unichar(a)),lambda(a,unicode(a)),lambda(a,upper(a)),lambda(a,value(a)),lambda(a,b,c,daverage(a,b,c)),lambda(a,b,c,dcount(a,b,c)),lambda(a,b,c,dcounta(a,b,c)),lambda(a,b,c,dget(a,b,c)),lambda(a,b,c,dmax(a,b,c)),lambda(a,b,c,dmin(a,b,c))),choose(mod(index-1,29)+1,lambda(a,b,c,dproduct(a,b,c)),lambda(a,b,c,dstdev(a,b,c)),lambda(a,b,c,dstdevp(a,b,c)),lambda(a,b,c,dsum(a,b,c)),lambda(a,b,c,dvar(a,b,c)),lambda(a,b,c,dvarp(a,b,c)),lambda(a,b,c,convert(a,b,c)),lambda(a,to_date(a)),lambda(a,to_dollars(a)),lambda(a,to_percent(a)),lambda(a,to_pure_number(a)),lambda(a,to_text(a)),lambda(a,b,c,array_constrain(a,b,c)),lambda(a,b,bycol(a,b)),lambda(a,b,byrow(a,b)),lambda(a,b,c,choosecols(a,b,c)),lambda(a,b,c,chooserows(a,b,c)),lambda(a,b,c,flatten(a,b,c)),lambda(a,b,frequency(a,b)),lambda(a,b,c,d,growth(a,b,c,d)),lambda(a,b,hstack(a,b)),lambda(a,b,c,d,linest(a,b,c,d)),lambda(a,b,c,d,logest(a,b,c,d)),lambda(a,b,c,makearray(a,b,c)),lambda(a,b,c,d,map(a,b,c,d)),lambda(a,mdeterm(a)),lambda(a,minverse(a)),lambda(a,b,mmult(a,b)),lambda(a,b,c,reduce(a,b,c))),choose(mod(index-1,29)+1,lambda(a,b,c,scan(a,b,c)),lambda(a,b,c,sumproduct(a,b,c)),lambda(a,b,sumx2my2(a,b)),lambda(a,b,sumx2py2(a,b)),lambda(a,b,sumxmy2(a,b)),lambda(a,b,c,tocol(a,b,c)),lambda(a,b,c,torow(a,b,c)),lambda(a,transpose(a)),lambda(a,b,c,d,trend(a,b,c,d)),lambda(a,b,vstack(a,b)),lambda(a,b,c,wrapcols(a,b,c)),lambda(a,b,c,wraprows(a,b,c)),lambda(a,encodeurl(a)),lambda(a,b,hyperlink(a,b)),lambda(a,importdata(a)),lambda(a,b,c,d,importfeed(a,b,c,d)),lambda(a,b,c,importhtml(a,b,c)),lambda(a,b,importrange(a,b)),lambda(a,b,importxml(a,b)),lambda(a,isurl(a)))))),
    isfunction,lambda(arg,regexmatch(arg,"^\w+\(")),
    typefix,lambda(input,
        if(iserror(--input), iferror(indirect(input),substitute(input, """", )), --input)
    ),
    eval, lambda(input, list,
        if(isfunction(input),
            let(
                name, regexextract(input,"^(\w+)\("),
                f, getfunc(name),
                args_raw, trim(split(regexextract(input,"\((.*)."),",")),
                args, reduce(udt(,,),args_raw,lambda(a,b,udt(typefix(if(left(b)="★",access(list,list(3)-mid(b,2,9^9)),b)),a,a(3)+1))),
                num_args, vlookup(name,fxs,2,),
                if(num_args,
                    choose(num_args,
                        f(access(args,)),
                        f(access(args,1),access(args,)),
                        f(access(args,2),access(args,1),access(args,)),
                        f(access(args,3),access(args,2),access(args,1),access(args,)),
                        f(access(args,4),access(args,3),access(args,2),access(args,1),access(args,)),
                        f(access(args,5),access(args,4),access(args,3),access(args,2),access(args,1),access(args,)),
                        f(access(args,6),access(args,5),access(args,4),access(args,3),access(args,2),access(args,1),access(args,))
                    ),
                    f
                )
            ),
            typefix(input)
        )
    ),
    recursiveeval, lambda(recursiveeval, input, list, n,
        let(
            separated, wraprows(split(regexreplace(input,"(\w*\([^\(]*?\))","☆$1☆"),"☆"),2),
            if(rows(separated) = 1,
                eval(input, list),
                recursiveeval(recursiveeval, join(,index(separated,,1)&{iferror("★"&sequence(rows(separated)-1,1,list(3)+1),tocol(,1));""}), reduce(list, tocol(index(separated,,2),3), lambda(a,b,udt(eval(b, a),a,a(3)+1))), n + 1)
            )
        )
    ),
    recursiveeval(recursiveeval, if(left(input)="=",mid(input,2,9^9),input), udt(,,-1),)
))
